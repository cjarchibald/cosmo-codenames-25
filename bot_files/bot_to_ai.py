
from ..__init__ import AIType, BotType


__BOT_TO_AI = { 
    BotType.W2V_GLOVE_BASELINE_GUESSER : AIType.BASELINE,
    BotType.W2V_BASELINE_GUESSER : AIType.BASELINE,
    BotType.GLOVE_50_BASELINE_GUESSER : AIType.BASELINE,
    BotType.GLOVE_100_BASELINE_GUESSER : AIType.BASELINE,
    BotType.GLOVE_200_BASELINE_GUESSER : AIType.BASELINE,
    BotType.GLOVE_300_BASELINE_GUESSER : AIType.BASELINE,
    BotType.CN_NB_BASELINE_GUESSER : AIType.BASELINE,
    BotType.D2V_BASELINE_GUESSER : AIType.BASELINE,
    BotType.NOISY_BASELINE_GUESSER : AIType.NOISY_BASELINE,
    BotType.ELMO_BASELINE_GUESSER : AIType.BASELINE,
    BotType.BERT1_BASELINE_GUESSER : AIType.BASELINE,
    BotType.BERT2_BASELINE_GUESSER : AIType.BASELINE,
    BotType.FAST_TEXT_BASELINE_GUESSER : AIType.BASELINE,
    
    BotType.W2V_DISTANCE_ASSOCIATOR : AIType.DISTANCE_ASSOCIATOR,
    BotType.GLOVE_300_DISTANCE_ASSOCIATOR : AIType.DISTANCE_ASSOCIATOR,
    BotType.GLOVE_50_DISTANCE_ASSOCIATOR : AIType.DISTANCE_ASSOCIATOR,
    BotType.GLOVE_100_DISTANCE_ASSOCIATOR : AIType.DISTANCE_ASSOCIATOR,
    BotType.GLOVE_200_DISTANCE_ASSOCIATOR : AIType.DISTANCE_ASSOCIATOR,
    BotType.GLOVE_300_DISTANCE_ASSOCIATOR : AIType.DISTANCE_ASSOCIATOR,
    BotType.W2V_GLOVE_DISTANCE_ASSOCIATOR : AIType.DISTANCE_ASSOCIATOR,
    BotType.CN_NB_DISTANCE_ASSOCIATOR : AIType.DISTANCE_ASSOCIATOR,
    BotType.D2V_DISTANCE_ASSOCIATOR : AIType.DISTANCE_ASSOCIATOR,
    BotType.NOISY_DISTANCE_ASSOCIATOR : AIType.NOISY_DISTANCE_ASSOCIATOR,
    BotType.ELMO_DISTANCE_ASSOCIATOR : AIType.DISTANCE_ASSOCIATOR,
    BotType.BERT1_DISTANCE_ASSOCIATOR : AIType.DISTANCE_ASSOCIATOR,
    BotType.BERT2_DISTANCE_ASSOCIATOR : AIType.DISTANCE_ASSOCIATOR,
    BotType.FAST_TEXT_DISTANCE_ASSOCIATOR : AIType.DISTANCE_ASSOCIATOR,

    BotType.DISTANCE_ENSEMBLE_CODEMASTER : AIType.DISTANCE_ENSEMBLE,
    BotType.DISTANCE_ENSEMBLE_GUESSER : AIType.DISTANCE_ENSEMBLE,

    BotType.RANDOM_DISTANCE_ENSEMBLE_CODEMASTER: AIType.RANDOM_DISTANCE_ENSEMBLE,
    BotType.RANDOM_DISTANCE_ENSEMBLE_GUESSER: AIType.RANDOM_DISTANCE_ENSEMBLE,

    BotType.ADAPTIVE_NOISE_CODEMASTER: AIType.ADAPTIVE_NOISE,

    BotType.GPT_CODEMASTER: AIType.GPT,
    BotType.GPT_GUESSER: AIType.GPTG,
    BotType.HUMAN_GUESSER: AIType.HUMAN,

    # competitive bots
    BotType.COMPETITIVE_CODEMASTER: AIType.COMPETITIVE,
    BotType.SABOTEUR_CODEMASTER: AIType.SABOTEUR,
    BotType.STINKY_CODEMASTER: AIType.STINKY,
    BotType.THIEF_BASELINE_GUESSER: AIType.THIEF_BASELINE,
    BotType.SPY_GUESSER: AIType.SPY,
    BotType.MARAUDER_GUESSER: AIType.MARAUDER,
    BotType.SECRET_CODEMASTER: AIType.SECRET,
    BotType.SECRET_GUESSER: AIType.SECRET,
    BotType.SECRET_COMPETITIVE_CODEMASTER: AIType.SECRET_COMPETITIVE,
    BotType.SELF_DEDUCING_CODEMASTER: AIType.SELF_DEDUCING,
    BotType.SELF_DEDUCING_GUESSER: AIType.SELF_DEDUCING,
    BotType.OPTIMAL_DEDUCING_CODEMASTER: AIType.OPTIMAL_DEDUCING,
    BotType.OPTIMAL_DEDUCING_GUESSER: AIType.OPTIMAL_DEDUCING,
    
    # dummy bots for solo play.
    BotType.DUMMY_CODEMASTER: AIType.DUMMY,
    BotType.DUMMY_GUESSER: AIType.DUMMY,
}

def get_ai(bot_type_key: 'BotType') -> 'AIType':

    return __BOT_TO_AI[bot_type_key]

def is_ensemble(bot_type: 'BotType')->bool:
    return get_ai(bot_type) in (AIType.DISTANCE_ENSEMBLE, AIType.RANDOM_DISTANCE_ENSEMBLE)